PROJECT WORKFLOW


1)Statystical analysis of the the dataset:

	-The distribution of secondary structure conformations [pie chart]
		
	-Residue composition of:
 		-The entire dataset [histograms]
		-The fraction of helix, strand and coil conformations [histograms]
		-Optional: composition of windows of 17 residues (overall, helix, strand and coil residues) [heatmaps]

	-Taxonomic classification [pie chart]

	-Structural classification (SCOP class) [pie chart]



2)Generating the sequence profile from our training set sequences:
	
	-Format uniprot sequence database with makeblastdb
		$ makeblastdb -in uniprot_sprot.fasta -dbtype prot
	
	-Run PSI-BLAST on all the sequences in the training set against the database generated
		$ psiblast -query $input_filename -db uniprot_sprot.fasta -evalue 0.01 -num_iterations 3 -out_ascii_pssm $input_filename_.pssm -out $input_filename_.alns.blast
		script:	
	
	-At this point, some sequences give no .pssm result after psiblast since they have no hit (?) ; it is therefore necessary to remove them from the jpred list before using it as input for the SVM (???also need to remove the sequences with pssm completely full of 0s???)
		$ ls | grep ".pssm" | sed 's/.pssm//' > pssm_list.txt
		$ ls | grep ".fasta" > jpred_list.txt
		$ comm jpred_list.txt ../pssm/pssm_list.txt -23 | sed 's/.fasta//' > psiblast_no_output_list.txt
		$ comm jpred4.list.txt psiblast_output/fasta/ids_to_remove_from_jpred.txt -23 > jpred_list_without_psiblast_nohit.txt
 
	
	-Obtain the sequence profile from all the .pssm files
		script: profile_from_pssm.sh
	-Check the profiles obtained for empty profiles
		$./sum_profile_values.sh ../dataset/psiblast_output/pssm/ | grep "^0 " | cut -d " " -f 2 > ../dataset/psiblast_output/empty_profiles.txt
	-Remove the empty profiles
		$ xargs rm  <../empty_profiles.txt

	-make the profiles svm-readable:
		script: svm_input_from_profile.py		


3)Generating the blind testing set:

	-Search PDB with the following parameters:
		DepositDateQuery: pdbx_database_status.recvd_initial_deposition_date.comparator=between pdbx_database_status.recvd_initial_deposition_date.min=2015-01-01 pdbx_database_status.recvd_initial_deposition_date.max=2019-09-12 and Resolution is between 0.0 and 2.5 and Sequence Length is between 50 and 300 and Percent Sequence Alignment Search : PDB can contain Expression Tag sequence = Yes , and Representative Structures at 30% Sequence Identity

	-Obtain from the file ID, chain and sequence
		$ less blind_set_reference.csv | cut -d "," -f 1,2,5 | sed 's/"//g' | sed 's/,/_/' | sed 's/^/>/' | sed 's/,/\n/'> bt_id_chain_seq.fasta

	-Cluster the chains using blastclust, in order to reduce similarity between the sequences in the blind testing set
		$ blastclust -i bt_id_seqs.fasta -o clustered_seqs.fasta -L 0.30 -S 30
	
	-Obtain a file containing ID and sequence of the cluster representatives (first element in each cluster)
		script: build_fasta_from_pdb_id.py
	
	-Obtain all the PDB sequences of the jpred dataset
		-download sequences option from pdb -> copy all ids from list in dataset
	
	-Format the jpred dataset in the same way as the blind set representatives
	
	-Format as a blast DB the cluster representatives fasta
		$ makeblastdb -in cluster_reps_seqs.fasta -dbtype prot	
	-Blast the jpred dataset against the database just obtained
		$ blastp -query formatted_jpred.fasta -db clustered_seqs_reps.fasta -evalue 0.01 -out hits.blast.tab -outfmt 6
	
	-From the tabular results, obtain the list of IDs (second column, the database --> blind set) with sequence similarity higher than 30% 
		$ awk -F "\t" '$3>=30.000' hits.blast.tab | sort -k3 -rn | cut -f 2 | sort -u > ids_to_remove_from_blind_set.txt

	-Remove from the cluster representative IDs the list of ids obtained in the previous step
		$ comm cluster_reps_sorted.txt ids_to_remove_from_blind_set.txt -3 > blind_set_without_jpred_ids.txt
	
	-Run again the script build_fasta_from_pdb_id.py on the new list of ids
		script: build_fasta_from_pdb_id.py

	-Check that all the chains are of length between 30 and 500 residues
		$ less bt_without_jpred_seqs.fasta | grep -v ">" | awk '{ print length($0) }'

	-Randomly select 150 ids from the list obtained
		$ sort -R blind_set_without_jpred_ids.txt | head -n +150 > blind_set_final_ids.txt		
	
	-Download the PDB files of all the IDS obtained
		script: download_pdb_from_ids.sh

	-Run dssp on all the pdb files obtained
		script: batch_dssp.sh
	
	-Obtain sequence and corresponding secondary structure prediction from each dssp file
		scripts: 1) extract_aa_ss_from_dssp.sh
			 2) get_aa_ss_from_extracted.py
	-FINAL OUTPUT: complete_bs.fasta



4)SVM
	-make the pssm profiles svm-readable:
		script: svm_input_from_profile.py
	
	-split the files in 5 sets
	
	-build 5 training sets with 4/5 of the data and run 4 svm-train iterations per set with the following parameters:
		-g : 0.5, 2
		-c : 2, 4
		


SVM:::: DO IT BEFORE GOR SINCE IT TAKES A LNG TIME
	-TAKE jpred
	-remove ids not matching after psiblast (92 or 98 i dont remember)
	-split the data in 5 sets
	-run libsvm using 4 sets and 1 and repeat changing the 1 and the 4
	


#####command to sync folder:  rsync -aPr /home/pelmo/project/ lsbVM:/home/um69/project



#building the database index
	makeblastdb -in uniprot_sprot.fasta -dbtype prot


#running psi-blast
	#reference command
		psiblast -query $input_filename -db uniprot_sprot.fasta -evalue 0.01 -num_iterations 3 -out_ascii_pssm $input_filename_.pssm -out $input_filename_.alns.blast



#obtaining the blind set

#search PDB with the following parameters:
DepositDateQuery: pdbx_database_status.recvd_initial_deposition_date.comparator=between pdbx_database_status.recvd_initial_deposition_date.min=2015-01-01 pdbx_database_status.recvd_initial_deposition_date.max=2019-09-12 and Resolution is between 0.0 and 2.5 and Sequence Length is between 50 and 300 and Percent Sequence Alignment Search : PDB can contain Expression Tag sequence = Yes , and Representative Structures at 30% Sequence Identity

#Obtain from the file just ID, chain and sequence
	less blind_set_reference.csv | cut -d "," -f 1,2,5 | sed 's/"//g' | sed 's/,/_/' | sed 's/^/>/' | sed 's/,/\n/'> bt_id_chain_seq.fasta
#Blastclust to reduce similarity
	blastclust -i bt_id_seqs.fasta -o clustered_seqs.fasta -L 0.30 -Sblastclust -i bt_id_seqs.fasta -o clustered_seqs.fasta -L 0.30 -S 30 30
